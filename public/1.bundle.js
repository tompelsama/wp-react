webpackJsonp([1],{147:function(t,e,n){(function(t){!function(){var e=n(26),o=n(27),r=n(18),a=n(4);t.makeHot=t.hot.data?t.hot.data.makeHot:e(function(){return o.getRootInstances(r)},a)}();try{(function(){"use strict";function t(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),u=n(4),c=t(u),i=n(52),l=t(i),f=function(t){function e(){return o(this,e),r(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,t),s(e,[{key:"render",value:function(){var t=l.default.getPageBySlug("about");return c.default.createElement("div",null,c.default.createElement("h1",null,t.title.rendered))}}]),e}(c.default.Component);e.default=f}).call(this)}finally{!function(){var e=t.hot.data&&t.hot.data.foundReactClasses||!1;if(t.exports&&t.makeHot){var o=n(28);o(t,n(4))&&(e=!0);var r=e;r&&t.hot.accept(function(t){t&&console.error("Cannot apply hot update to About.js: "+t.message)})}t.hot.dispose(function(n){n.makeHot=t.makeHot,n.foundReactClasses=e})}()}}).call(e,n(17)(t))},389:function(t,e,n){function o(t){return n(r(t))}function r(t){return a[t]||function(){throw new Error("Cannot find module '"+t+"'.")}()}var a={"./actions/DataActions":65,"./actions/DataActions.js":65,"./alt/alt":66,"./alt/alt.js":66,"./components/About":147,"./components/About.js":147,"./components/App":95,"./components/App.js":95,"./components/Home":96,"./components/Home.js":96,"./components/Nav":97,"./components/Nav.js":97,"./components/views":98,"./components/views.js":98,"./index":99,"./index.js":99,"./stores/DataStore":52,"./stores/DataStore.js":52,"./styles/main.scss":116};o.keys=function(){return Object.keys(a)},o.resolve=r,t.exports=o,o.id=389}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,